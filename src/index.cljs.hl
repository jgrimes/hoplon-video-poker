(page "index.html"
    (:require [video-poker.core :as core]))

(defc new-count 0)
(defc current-hand (core/deal-hand :fixed ["CA" "H4" "DA" "HA" "S3"]))
(defc= current-info (core/read-hand (keys current-hand)))
(defc= current-hand-index (map-indexed #(vector %1 %2) current-hand))

(defc= what-do-i-have (first current-info))
(defc= score (second current-info))
(defc total 0)

(defc= held-cards (map #(get-in % [1 1 :held]) current-hand-index))

;;(cell= (prn current-hand-index))
;;(cell= (prn held-cards))

(cell= (prn new-count))

(defn record-score
  "Add the score from the current hand to the total"
  []
  (swap! total #(+ %1 @score)))

(defn muck
  "Discard the entire hand, reset the deck, re-deal, clear holds"
  []
  (dosync 
    (reset! new-count 0)
    (core/reset-deck)
    (reset! current-hand (core/deal-hand))))

(defn hold-state
  "Set the hold state on a card"
  [idx state]
  (swap! 
    current-hand 
      (fn [value] 
        (assoc-in 
          (vec value) [idx 1 :held] state))))

(defn apply-to-hand
  "Run the given function against all cards in the hand
  
  Func takes three arguments:
     - the index of the card
     - the card code
     - info about the card (map of url, held state)
  "
  [func]
  (doseq [[idx [card info]] @current-hand-index]
    (func idx card info)))

(defn toggle-hold
  "Hold/Unhold a card, but only when the user is allowed to
   do so (they get two chances)"
  [idx]
  (if (not= new-count 2)
    (swap! 
      current-hand 
        (fn [value] 
          (update-in 
            (vec value) [idx 1 :held] not)))))

(defn new-card
  "Discard the card at the given index, and replace it with a new one"
  [idx]
  (core/discard (get-in @current-hand [idx 0]))
  (reset! 
    current-hand 
      (assoc-in @current-hand [idx] (core/deal))))

(defn new-cards
  "Discard the unheld cards, get new ones from the deck"
  []
  (case @new-count
    ;; score and reset the cards
    2 (dosync 
        (muck)
        (record-score))
    ;; turn off the holds when the next option is score/muck
    1 (dosync
        (swap! new-count inc)
        (apply-to-hand
          #(hold-state %1 false)))
    ;; replace the non-held cards
    (dosync 
      (swap! new-count inc)
      (apply-to-hand
        #(if (not (:held %3))
          (new-card %1))))))

(defc= deal-label
  (case new-count
    0 "deal"
    1 "deal"
    2 "try again"))

(html
  (head
    (title "Hoplon Video Poker")
    (link 
      :rel "stylesheet" 
      :href "css/style.css" 
      :type "text/css"))
  
  (body
    (h1 "Video Poker!")
    (div :text total)
    (div 
      :class "current-hand"
      :text what-do-i-have)
    (div
      (button 
        :click new-cards
        :text (cell= deal-label)))
    (div :class "hand"
      (loop-tpl
        :bindings [[idx [card info]] current-hand-index]
          (img 
            :src (cell= (:url info))
            :do-class (cell= {:selected (get-in current-hand [idx 1 :held])})
            :click #(toggle-hold @idx))))))